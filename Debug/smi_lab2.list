
smi_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000678  08000678  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000678  08000678  00010678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800067c  0800067c  0001067c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000028  20000028  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000ec7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000032d  00000000  00000000  00020efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000f8  00000000  00000000  00021228  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00021320  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000006bd  00000000  00000000  000213e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000005d7  00000000  00000000  00021a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00022074  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000264  00000000  00000000  000220f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00022354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000660 	.word	0x08000660

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000660 	.word	0x08000660

080001c8 <configureLEDs>:

volatile uint32_t decountForSeconds = 0;
volatile uint32_t decountForMilliSeconds = 0;


void configureLEDs(){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= BIT3;
 80001cc:	4a1d      	ldr	r2, [pc, #116]	; (8000244 <configureLEDs+0x7c>)
 80001ce:	4b1d      	ldr	r3, [pc, #116]	; (8000244 <configureLEDs+0x7c>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= BIT24;
 80001d8:	4a1b      	ldr	r2, [pc, #108]	; (8000248 <configureLEDs+0x80>)
 80001da:	4b1b      	ldr	r3, [pc, #108]	; (8000248 <configureLEDs+0x80>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT25;
 80001e4:	4a18      	ldr	r2, [pc, #96]	; (8000248 <configureLEDs+0x80>)
 80001e6:	4b18      	ldr	r3, [pc, #96]	; (8000248 <configureLEDs+0x80>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT26;
 80001f0:	4a15      	ldr	r2, [pc, #84]	; (8000248 <configureLEDs+0x80>)
 80001f2:	4b15      	ldr	r3, [pc, #84]	; (8000248 <configureLEDs+0x80>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT27;
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <configureLEDs+0x80>)
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <configureLEDs+0x80>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000206:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT28;
 8000208:	4a0f      	ldr	r2, [pc, #60]	; (8000248 <configureLEDs+0x80>)
 800020a:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <configureLEDs+0x80>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000212:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT29;
 8000214:	4a0c      	ldr	r2, [pc, #48]	; (8000248 <configureLEDs+0x80>)
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <configureLEDs+0x80>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800021e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT30;
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <configureLEDs+0x80>)
 8000222:	4b09      	ldr	r3, [pc, #36]	; (8000248 <configureLEDs+0x80>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BIT31;
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <configureLEDs+0x80>)
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <configureLEDs+0x80>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000236:	6013      	str	r3, [r2, #0]
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40023800 	.word	0x40023800
 8000248:	40020c00 	.word	0x40020c00

0800024c <configureSysTick>:

void configureSysTick(){
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	SysTick->LOAD=SysTick_LOAD_RELOAD;
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <configureSysTick+0x40>)
 8000252:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <configureSysTick+0x44>)
 8000254:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <configureSysTick+0x40>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= BIT2; //Clock source selection as 1: Processor clock (AHB)
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <configureSysTick+0x40>)
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <configureSysTick+0x40>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= BIT1; //SysTick exception request enable
 8000268:	4a08      	ldr	r2, [pc, #32]	; (800028c <configureSysTick+0x40>)
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <configureSysTick+0x40>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f043 0302 	orr.w	r3, r3, #2
 8000272:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= BIT0; //Counter enable
 8000274:	4a05      	ldr	r2, [pc, #20]	; (800028c <configureSysTick+0x40>)
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <configureSysTick+0x40>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e010 	.word	0xe000e010
 8000290:	00668a00 	.word	0x00668a00

08000294 <configureTIM2>:

void configureTIM2(){
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= BIT0; //TIM2 clock enable
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <configureTIM2+0x70>)
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <configureTIM2+0x70>)
 800029c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 2*(SystemCoreClock/4)/10000-1; //Base of 10 kHz
 80002a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <configureTIM2+0x74>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	4916      	ldr	r1, [pc, #88]	; (800030c <configureTIM2+0x78>)
 80002b2:	fba1 1303 	umull	r1, r3, r1, r3
 80002b6:	0b5b      	lsrs	r3, r3, #13
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	3b01      	subs	r3, #1
 80002bc:	b29b      	uxth	r3, r3
 80002be:	8513      	strh	r3, [r2, #40]	; 0x28
	TIM2->ARR = 5000-1; //Needs to be 0.5 sec to work with the if conditions
 80002c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c4:	f241 3287 	movw	r2, #4999	; 0x1387
 80002c8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= BIT0; //Update interrupt enable
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d2:	899b      	ldrh	r3, [r3, #12]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	b29b      	uxth	r3, r3
 80002dc:	8193      	strh	r3, [r2, #12]
	NVIC->ISER[0]=BIT28; //Enable TIM2 interrupt
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <configureTIM2+0x7c>)
 80002e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002e4:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= BIT0; //TIM2 counter enable
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	8013      	strh	r3, [r2, #0]
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	20000000 	.word	0x20000000
 800030c:	d1b71759 	.word	0xd1b71759
 8000310:	e000e100 	.word	0xe000e100

08000314 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	if (decountForMilliSeconds != 3) {
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <TIM2_IRQHandler+0x80>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b03      	cmp	r3, #3
 800031e:	d011      	beq.n	8000344 <TIM2_IRQHandler+0x30>
		GPIOD->ODR |= LED_VERTE;
 8000320:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <TIM2_IRQHandler+0x84>)
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <TIM2_IRQHandler+0x84>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800032a:	6153      	str	r3, [r2, #20]
		GPIOD->ODR |= LED_BLEUE;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <TIM2_IRQHandler+0x84>)
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <TIM2_IRQHandler+0x84>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000336:	6153      	str	r3, [r2, #20]
		decountForMilliSeconds++;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <TIM2_IRQHandler+0x80>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	4a15      	ldr	r2, [pc, #84]	; (8000394 <TIM2_IRQHandler+0x80>)
 8000340:	6013      	str	r3, [r2, #0]
 8000342:	e00e      	b.n	8000362 <TIM2_IRQHandler+0x4e>
	} else {
		GPIOD->ODR &= ~(LED_VERTE);
 8000344:	4a14      	ldr	r2, [pc, #80]	; (8000398 <TIM2_IRQHandler+0x84>)
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <TIM2_IRQHandler+0x84>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800034e:	6153      	str	r3, [r2, #20]
		GPIOD->ODR &= ~(LED_BLEUE);
 8000350:	4a11      	ldr	r2, [pc, #68]	; (8000398 <TIM2_IRQHandler+0x84>)
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <TIM2_IRQHandler+0x84>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800035a:	6153      	str	r3, [r2, #20]
		decountForMilliSeconds = 0;
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <TIM2_IRQHandler+0x80>)
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
	}
	TIM2->SR &= ~BIT0;
 8000362:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036a:	8a1b      	ldrh	r3, [r3, #16]
 800036c:	b29b      	uxth	r3, r3
 800036e:	f023 0301 	bic.w	r3, r3, #1
 8000372:	b29b      	uxth	r3, r3
 8000374:	8213      	strh	r3, [r2, #16]
	TIM2->CR1 |= BIT0; //TIM2 counter enable
 8000376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	b29b      	uxth	r3, r3
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	b29b      	uxth	r3, r3
 8000388:	8013      	strh	r3, [r2, #0]
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	20000024 	.word	0x20000024
 8000398:	40020c00 	.word	0x40020c00

0800039c <SysTick_Handler>:


void SysTick_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	if (decountForSeconds == 3) {
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <SysTick_Handler+0x58>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d10f      	bne.n	80003c8 <SysTick_Handler+0x2c>
		GPIOD->ODR &= ~(LED_ORANGE);
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <SysTick_Handler+0x5c>)
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <SysTick_Handler+0x5c>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80003b2:	6153      	str	r3, [r2, #20]
		GPIOD->ODR &= ~(LED_ROUGE);
 80003b4:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <SysTick_Handler+0x5c>)
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <SysTick_Handler+0x5c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003be:	6153      	str	r3, [r2, #20]
		decountForSeconds = 0;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <SysTick_Handler+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
	} else {
		GPIOD->ODR |= LED_ORANGE;
		GPIOD->ODR |= LED_ROUGE;
		decountForSeconds++;
	}
}
 80003c6:	e010      	b.n	80003ea <SysTick_Handler+0x4e>
		GPIOD->ODR |= LED_ORANGE;
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <SysTick_Handler+0x5c>)
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <SysTick_Handler+0x5c>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003d2:	6153      	str	r3, [r2, #20]
		GPIOD->ODR |= LED_ROUGE;
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <SysTick_Handler+0x5c>)
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <SysTick_Handler+0x5c>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003de:	6153      	str	r3, [r2, #20]
		decountForSeconds++;
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <SysTick_Handler+0x58>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	4a03      	ldr	r2, [pc, #12]	; (80003f4 <SysTick_Handler+0x58>)
 80003e8:	6013      	str	r3, [r2, #0]
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	20000020 	.word	0x20000020
 80003f8:	40020c00 	.word	0x40020c00

080003fc <main>:

int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	configureLEDs();
 8000400:	f7ff fee2 	bl	80001c8 <configureLEDs>
	configureSysTick();
 8000404:	f7ff ff22 	bl	800024c <configureSysTick>
	configureTIM2();
 8000408:	f7ff ff44 	bl	8000294 <configureTIM2>
	while (1);
 800040c:	e7fe      	b.n	800040c <main+0x10>
	...

08000410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000448 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000414:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000416:	e003      	b.n	8000420 <LoopCopyDataInit>

08000418 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800041a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800041c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800041e:	3104      	adds	r1, #4

08000420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000424:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000426:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000428:	d3f6      	bcc.n	8000418 <CopyDataInit>
  ldr  r2, =_sbss
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800042c:	e002      	b.n	8000434 <LoopFillZerobss>

0800042e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800042e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000430:	f842 3b04 	str.w	r3, [r2], #4

08000434 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000436:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000438:	d3f9      	bcc.n	800042e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800043a:	f000 f83b 	bl	80004b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800043e:	f000 f8eb 	bl	8000618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000442:	f7ff ffdb 	bl	80003fc <main>
  bx  lr    
 8000446:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000448:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800044c:	08000680 	.word	0x08000680
  ldr  r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000454:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000458:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800045c:	20000028 	.word	0x20000028

08000460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000460:	e7fe      	b.n	8000460 <ADC_IRQHandler>

08000462 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000474:	e7fe      	b.n	8000474 <HardFault_Handler+0x4>

08000476 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800047a:	e7fe      	b.n	800047a <MemManage_Handler+0x4>

0800047c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000480:	e7fe      	b.n	8000480 <BusFault_Handler+0x4>

08000482 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000486:	e7fe      	b.n	8000486 <UsageFault_Handler+0x4>

08000488 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
	...

080004b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004b8:	4a16      	ldr	r2, [pc, #88]	; (8000514 <SystemInit+0x60>)
 80004ba:	4b16      	ldr	r3, [pc, #88]	; (8000514 <SystemInit+0x60>)
 80004bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004c8:	4a13      	ldr	r2, [pc, #76]	; (8000518 <SystemInit+0x64>)
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <SystemInit+0x64>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <SystemInit+0x64>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004da:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <SystemInit+0x64>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <SystemInit+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <SystemInit+0x64>)
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <SystemInit+0x68>)
 80004ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <SystemInit+0x64>)
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <SystemInit+0x64>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <SystemInit+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000502:	f000 f80d 	bl	8000520 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000506:	4b03      	ldr	r3, [pc, #12]	; (8000514 <SystemInit+0x60>)
 8000508:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800050c:	609a      	str	r2, [r3, #8]
#endif
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	e000ed00 	.word	0xe000ed00
 8000518:	40023800 	.word	0x40023800
 800051c:	24003010 	.word	0x24003010

08000520 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800052e:	4a36      	ldr	r2, [pc, #216]	; (8000608 <SetSysClock+0xe8>)
 8000530:	4b35      	ldr	r3, [pc, #212]	; (8000608 <SetSysClock+0xe8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000538:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800053a:	4b33      	ldr	r3, [pc, #204]	; (8000608 <SetSysClock+0xe8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d103      	bne.n	8000558 <SetSysClock+0x38>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000556:	d1f0      	bne.n	800053a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000558:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <SetSysClock+0xe8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000564:	2301      	movs	r3, #1
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	e001      	b.n	800056e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800056a:	2300      	movs	r3, #0
 800056c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d142      	bne.n	80005fa <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000574:	4a24      	ldr	r2, [pc, #144]	; (8000608 <SetSysClock+0xe8>)
 8000576:	4b24      	ldr	r3, [pc, #144]	; (8000608 <SetSysClock+0xe8>)
 8000578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000580:	4a22      	ldr	r2, [pc, #136]	; (800060c <SetSysClock+0xec>)
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <SetSysClock+0xec>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800058c:	4a1e      	ldr	r2, [pc, #120]	; (8000608 <SetSysClock+0xe8>)
 800058e:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <SetSysClock+0xe8>)
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000594:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <SetSysClock+0xe8>)
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <SetSysClock+0xe8>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800059e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <SetSysClock+0xe8>)
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <SetSysClock+0xe8>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80005aa:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <SetSysClock+0xe8>)
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <SetSysClock+0xf0>)
 80005b0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005b2:	4a15      	ldr	r2, [pc, #84]	; (8000608 <SetSysClock+0xe8>)
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <SetSysClock+0xe8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005bc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005be:	bf00      	nop
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <SetSysClock+0xe8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0f9      	beq.n	80005c0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <SetSysClock+0xf4>)
 80005ce:	f240 7205 	movw	r2, #1797	; 0x705
 80005d2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <SetSysClock+0xe8>)
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <SetSysClock+0xe8>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f023 0303 	bic.w	r3, r3, #3
 80005de:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005e0:	4a09      	ldr	r2, [pc, #36]	; (8000608 <SetSysClock+0xe8>)
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <SetSysClock+0xe8>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f043 0302 	orr.w	r3, r3, #2
 80005ea:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80005ec:	bf00      	nop
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <SetSysClock+0xe8>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f003 030c 	and.w	r3, r3, #12
 80005f6:	2b08      	cmp	r3, #8
 80005f8:	d1f9      	bne.n	80005ee <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000
 8000610:	07405419 	.word	0x07405419
 8000614:	40023c00 	.word	0x40023c00

08000618 <__libc_init_array>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	4e0d      	ldr	r6, [pc, #52]	; (8000650 <__libc_init_array+0x38>)
 800061c:	4c0d      	ldr	r4, [pc, #52]	; (8000654 <__libc_init_array+0x3c>)
 800061e:	1ba4      	subs	r4, r4, r6
 8000620:	10a4      	asrs	r4, r4, #2
 8000622:	2500      	movs	r5, #0
 8000624:	42a5      	cmp	r5, r4
 8000626:	d109      	bne.n	800063c <__libc_init_array+0x24>
 8000628:	4e0b      	ldr	r6, [pc, #44]	; (8000658 <__libc_init_array+0x40>)
 800062a:	4c0c      	ldr	r4, [pc, #48]	; (800065c <__libc_init_array+0x44>)
 800062c:	f000 f818 	bl	8000660 <_init>
 8000630:	1ba4      	subs	r4, r4, r6
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	2500      	movs	r5, #0
 8000636:	42a5      	cmp	r5, r4
 8000638:	d105      	bne.n	8000646 <__libc_init_array+0x2e>
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000640:	4798      	blx	r3
 8000642:	3501      	adds	r5, #1
 8000644:	e7ee      	b.n	8000624 <__libc_init_array+0xc>
 8000646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800064a:	4798      	blx	r3
 800064c:	3501      	adds	r5, #1
 800064e:	e7f2      	b.n	8000636 <__libc_init_array+0x1e>
 8000650:	08000678 	.word	0x08000678
 8000654:	08000678 	.word	0x08000678
 8000658:	08000678 	.word	0x08000678
 800065c:	0800067c 	.word	0x0800067c

08000660 <_init>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr

0800066c <_fini>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	bf00      	nop
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr
