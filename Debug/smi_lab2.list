
smi_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000047c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000604  08000604  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000604  08000604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800060c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000024  20000024  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001100  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000398  00000000  00000000  00021134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000108  00000000  00000000  000214d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  000215d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000006ee  00000000  00000000  000216a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000a5f  00000000  00000000  00021d96  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000227f5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000002a8  00000000  00000000  00022874  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00022b1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005ec 	.word	0x080005ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080005ec 	.word	0x080005ec

080001c8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	da0b      	bge.n	80001f4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001dc:	490d      	ldr	r1, [pc, #52]	; (8000214 <NVIC_SetPriority+0x4c>)
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	f003 030f 	and.w	r3, r3, #15
 80001e4:	3b04      	subs	r3, #4
 80001e6:	683a      	ldr	r2, [r7, #0]
 80001e8:	b2d2      	uxtb	r2, r2
 80001ea:	0112      	lsls	r2, r2, #4
 80001ec:	b2d2      	uxtb	r2, r2
 80001ee:	440b      	add	r3, r1
 80001f0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80001f2:	e009      	b.n	8000208 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80001f4:	4908      	ldr	r1, [pc, #32]	; (8000218 <NVIC_SetPriority+0x50>)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	683a      	ldr	r2, [r7, #0]
 80001fc:	b2d2      	uxtb	r2, r2
 80001fe:	0112      	lsls	r2, r2, #4
 8000200:	b2d2      	uxtb	r2, r2
 8000202:	440b      	add	r3, r1
 8000204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000ed00 	.word	0xe000ed00
 8000218:	e000e100 	.word	0xe000e100

0800021c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800022a:	d301      	bcc.n	8000230 <SysTick_Config+0x14>
 800022c:	2301      	movs	r3, #1
 800022e:	e011      	b.n	8000254 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000230:	4a0a      	ldr	r2, [pc, #40]	; (800025c <SysTick_Config+0x40>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000238:	3b01      	subs	r3, #1
 800023a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800023c:	210f      	movs	r1, #15
 800023e:	f04f 30ff 	mov.w	r0, #4294967295
 8000242:	f7ff ffc1 	bl	80001c8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <SysTick_Config+0x40>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <SysTick_Config+0x40>)
 800024e:	2207      	movs	r2, #7
 8000250:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000252:	2300      	movs	r3, #0
}
 8000254:	4618      	mov	r0, r3
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	e000e010 	.word	0xe000e010

08000260 <configureLEDs>:
#define LED_BLEUE			(BIT15)

volatile uint32_t tick = 0;
volatile uint32_t decount = 0;

void configureLEDs(){
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= BIT3;
 8000264:	4a11      	ldr	r2, [pc, #68]	; (80002ac <configureLEDs+0x4c>)
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <configureLEDs+0x4c>)
 8000268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026a:	f043 0308 	orr.w	r3, r3, #8
 800026e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= BIT24;
 8000270:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <configureLEDs+0x50>)
 8000272:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <configureLEDs+0x50>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800027a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT26;
 800027c:	4a0c      	ldr	r2, [pc, #48]	; (80002b0 <configureLEDs+0x50>)
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <configureLEDs+0x50>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT28;
 8000288:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <configureLEDs+0x50>)
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <configureLEDs+0x50>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000292:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BIT30;
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <configureLEDs+0x50>)
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <configureLEDs+0x50>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800029e:	6013      	str	r3, [r2, #0]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020c00 	.word	0x40020c00

080002b4 <turnOnTheLights>:

void turnOnTheLights(){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	GPIOD->ODR |= LED_VERTE;
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <turnOnTheLights+0x40>)
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <turnOnTheLights+0x40>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c2:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= LED_ORANGE;
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <turnOnTheLights+0x40>)
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <turnOnTheLights+0x40>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ce:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= LED_ROUGE;
 80002d0:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <turnOnTheLights+0x40>)
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <turnOnTheLights+0x40>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002da:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= LED_BLEUE;
 80002dc:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <turnOnTheLights+0x40>)
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <turnOnTheLights+0x40>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002e6:	6153      	str	r3, [r2, #20]
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40020c00 	.word	0x40020c00

080002f8 <turnOffTheLights>:

void turnOffTheLights(){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(LED_VERTE);
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <turnOffTheLights+0x40>)
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <turnOffTheLights+0x40>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000306:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(LED_ORANGE);
 8000308:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <turnOffTheLights+0x40>)
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <turnOffTheLights+0x40>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000312:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(LED_ROUGE);
 8000314:	4a08      	ldr	r2, [pc, #32]	; (8000338 <turnOffTheLights+0x40>)
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <turnOffTheLights+0x40>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800031e:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(LED_BLEUE);
 8000320:	4a05      	ldr	r2, [pc, #20]	; (8000338 <turnOffTheLights+0x40>)
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <turnOffTheLights+0x40>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800032a:	6153      	str	r3, [r2, #20]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40020c00 	.word	0x40020c00

0800033c <SysTick_Handler>:
void configureSysTickTimer(){
	SysTick_Config(SystemCoreClock / 1000);
}

void SysTick_Handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	if (decount == 7) {
 8000340:	4b0e      	ldr	r3, [pc, #56]	; (800037c <SysTick_Handler+0x40>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b07      	cmp	r3, #7
 8000346:	d103      	bne.n	8000350 <SysTick_Handler+0x14>
		decount = 0;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <SysTick_Handler+0x40>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		decount++;
	} else {
		turnOnTheLights();
		decount++;
	}
}
 800034e:	e012      	b.n	8000376 <SysTick_Handler+0x3a>
	} else if(decount == 6){
 8000350:	4b0a      	ldr	r3, [pc, #40]	; (800037c <SysTick_Handler+0x40>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b06      	cmp	r3, #6
 8000356:	d107      	bne.n	8000368 <SysTick_Handler+0x2c>
		turnOffTheLights();
 8000358:	f7ff ffce 	bl	80002f8 <turnOffTheLights>
		decount++;
 800035c:	4b07      	ldr	r3, [pc, #28]	; (800037c <SysTick_Handler+0x40>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	4a06      	ldr	r2, [pc, #24]	; (800037c <SysTick_Handler+0x40>)
 8000364:	6013      	str	r3, [r2, #0]
}
 8000366:	e006      	b.n	8000376 <SysTick_Handler+0x3a>
		turnOnTheLights();
 8000368:	f7ff ffa4 	bl	80002b4 <turnOnTheLights>
		decount++;
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <SysTick_Handler+0x40>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	4a02      	ldr	r2, [pc, #8]	; (800037c <SysTick_Handler+0x40>)
 8000374:	6013      	str	r3, [r2, #0]
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000020 	.word	0x20000020

08000380 <main>:

int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	configureLEDs();
 8000384:	f7ff ff6c 	bl	8000260 <configureLEDs>
	SysTick_Config(SystemCoreClock / 4);
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <main+0x18>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	089b      	lsrs	r3, r3, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff44 	bl	800021c <SysTick_Config>
	while (1);
 8000394:	e7fe      	b.n	8000394 <main+0x14>
 8000396:	bf00      	nop
 8000398:	20000000 	.word	0x20000000

0800039c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800039c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003a2:	e003      	b.n	80003ac <LoopCopyDataInit>

080003a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003aa:	3104      	adds	r1, #4

080003ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003ac:	480b      	ldr	r0, [pc, #44]	; (80003dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003b4:	d3f6      	bcc.n	80003a4 <CopyDataInit>
  ldr  r2, =_sbss
 80003b6:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003b8:	e002      	b.n	80003c0 <LoopFillZerobss>

080003ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003bc:	f842 3b04 	str.w	r3, [r2], #4

080003c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003c4:	d3f9      	bcc.n	80003ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003c6:	f000 f83b 	bl	8000440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ca:	f000 f8eb 	bl	80005a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ce:	f7ff ffd7 	bl	8000380 <main>
  bx  lr    
 80003d2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80003d8:	0800060c 	.word	0x0800060c
  ldr  r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003e0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80003e4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80003e8:	20000024 	.word	0x20000024

080003ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC_IRQHandler>

080003ee <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000400:	e7fe      	b.n	8000400 <HardFault_Handler+0x4>

08000402 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000406:	e7fe      	b.n	8000406 <MemManage_Handler+0x4>

08000408 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800040c:	e7fe      	b.n	800040c <BusFault_Handler+0x4>

0800040e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000412:	e7fe      	b.n	8000412 <UsageFault_Handler+0x4>

08000414 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000444:	4a16      	ldr	r2, [pc, #88]	; (80004a0 <SystemInit+0x60>)
 8000446:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <SystemInit+0x60>)
 8000448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800044c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000454:	4a13      	ldr	r2, [pc, #76]	; (80004a4 <SystemInit+0x64>)
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <SystemInit+0x64>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 0301 	orr.w	r3, r3, #1
 800045e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <SystemInit+0x64>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000466:	4a0f      	ldr	r2, [pc, #60]	; (80004a4 <SystemInit+0x64>)
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <SystemInit+0x64>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000474:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <SystemInit+0x64>)
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <SystemInit+0x68>)
 800047a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800047c:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <SystemInit+0x64>)
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <SystemInit+0x64>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000486:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <SystemInit+0x64>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800048e:	f000 f80d 	bl	80004ac <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000492:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <SystemInit+0x60>)
 8000494:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000498:	609a      	str	r2, [r3, #8]
#endif
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	e000ed00 	.word	0xe000ed00
 80004a4:	40023800 	.word	0x40023800
 80004a8:	24003010 	.word	0x24003010

080004ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	2300      	movs	r3, #0
 80004b8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004ba:	4a36      	ldr	r2, [pc, #216]	; (8000594 <SetSysClock+0xe8>)
 80004bc:	4b35      	ldr	r3, [pc, #212]	; (8000594 <SetSysClock+0xe8>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004c6:	4b33      	ldr	r3, [pc, #204]	; (8000594 <SetSysClock+0xe8>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3301      	adds	r3, #1
 80004d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d103      	bne.n	80004e4 <SetSysClock+0x38>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80004e2:	d1f0      	bne.n	80004c6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80004e4:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <SetSysClock+0xe8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004f0:	2301      	movs	r3, #1
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	e001      	b.n	80004fa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004f6:	2300      	movs	r3, #0
 80004f8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d142      	bne.n	8000586 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000500:	4a24      	ldr	r2, [pc, #144]	; (8000594 <SetSysClock+0xe8>)
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <SetSysClock+0xe8>)
 8000504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800050c:	4a22      	ldr	r2, [pc, #136]	; (8000598 <SetSysClock+0xec>)
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <SetSysClock+0xec>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000516:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000518:	4a1e      	ldr	r2, [pc, #120]	; (8000594 <SetSysClock+0xe8>)
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <SetSysClock+0xe8>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000520:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <SetSysClock+0xe8>)
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <SetSysClock+0xe8>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800052a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800052c:	4a19      	ldr	r2, [pc, #100]	; (8000594 <SetSysClock+0xe8>)
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <SetSysClock+0xe8>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000536:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <SetSysClock+0xe8>)
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <SetSysClock+0xf0>)
 800053c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800053e:	4a15      	ldr	r2, [pc, #84]	; (8000594 <SetSysClock+0xe8>)
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <SetSysClock+0xe8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000548:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800054a:	bf00      	nop
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <SetSysClock+0xe8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0f9      	beq.n	800054c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <SetSysClock+0xf4>)
 800055a:	f240 7205 	movw	r2, #1797	; 0x705
 800055e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000560:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <SetSysClock+0xe8>)
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <SetSysClock+0xe8>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	f023 0303 	bic.w	r3, r3, #3
 800056a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <SetSysClock+0xe8>)
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <SetSysClock+0xe8>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	f043 0302 	orr.w	r3, r3, #2
 8000576:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000578:	bf00      	nop
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <SetSysClock+0xe8>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	f003 030c 	and.w	r3, r3, #12
 8000582:	2b08      	cmp	r3, #8
 8000584:	d1f9      	bne.n	800057a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800
 8000598:	40007000 	.word	0x40007000
 800059c:	07405419 	.word	0x07405419
 80005a0:	40023c00 	.word	0x40023c00

080005a4 <__libc_init_array>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	4e0d      	ldr	r6, [pc, #52]	; (80005dc <__libc_init_array+0x38>)
 80005a8:	4c0d      	ldr	r4, [pc, #52]	; (80005e0 <__libc_init_array+0x3c>)
 80005aa:	1ba4      	subs	r4, r4, r6
 80005ac:	10a4      	asrs	r4, r4, #2
 80005ae:	2500      	movs	r5, #0
 80005b0:	42a5      	cmp	r5, r4
 80005b2:	d109      	bne.n	80005c8 <__libc_init_array+0x24>
 80005b4:	4e0b      	ldr	r6, [pc, #44]	; (80005e4 <__libc_init_array+0x40>)
 80005b6:	4c0c      	ldr	r4, [pc, #48]	; (80005e8 <__libc_init_array+0x44>)
 80005b8:	f000 f818 	bl	80005ec <_init>
 80005bc:	1ba4      	subs	r4, r4, r6
 80005be:	10a4      	asrs	r4, r4, #2
 80005c0:	2500      	movs	r5, #0
 80005c2:	42a5      	cmp	r5, r4
 80005c4:	d105      	bne.n	80005d2 <__libc_init_array+0x2e>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005cc:	4798      	blx	r3
 80005ce:	3501      	adds	r5, #1
 80005d0:	e7ee      	b.n	80005b0 <__libc_init_array+0xc>
 80005d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005d6:	4798      	blx	r3
 80005d8:	3501      	adds	r5, #1
 80005da:	e7f2      	b.n	80005c2 <__libc_init_array+0x1e>
 80005dc:	08000604 	.word	0x08000604
 80005e0:	08000604 	.word	0x08000604
 80005e4:	08000604 	.word	0x08000604
 80005e8:	08000608 	.word	0x08000608

080005ec <_init>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr

080005f8 <_fini>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	bf00      	nop
 80005fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	469e      	mov	lr, r3
 8000602:	4770      	bx	lr
